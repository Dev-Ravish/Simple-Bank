// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer.sql

package db

import (
	"context"
)

const getTransfer = `-- name: GetTransfer :one
SELECT id, transfer_from_account, transfer_to_account, amount, created_at FROM transfers
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.TransferFromAccount,
		&i.TransferToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const transferAmount = `-- name: TransferAmount :one

INSERT INTO transfers (
    transfer_from_account, 
    transfer_to_account,   
    amount
) VALUES (
  $1, $2, $3
)RETURNING id, transfer_from_account, transfer_to_account, amount, created_at
`

type TransferAmountParams struct {
	TransferFromAccount int64 `json:"transfer_from_account"`
	TransferToAccount   int64 `json:"transfer_to_account"`
	Amount              int64 `json:"amount"`
}

func (q *Queries) TransferAmount(ctx context.Context, arg TransferAmountParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, transferAmount, arg.TransferFromAccount, arg.TransferToAccount, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.TransferFromAccount,
		&i.TransferToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
